{"version":3,"sources":["component/card/card.component.js","component/cardList/Cardlist.component.js","component/search/Search.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","username","address","zipcode","Cardlist","monsters","map","key","SearchFi","placeholder","searchword","type","onChange","App","e","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredSearch","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAEaA,G,MAAO,SAACC,GAAD,OACnB,yBAAKC,UAAU,sDACf,yBAAKC,IAAI,MAAMC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,mBAClB,4BAAKL,EAAMI,QAAQE,MACnB,4BAAKN,EAAMI,QAAQG,OACnB,2BAAIP,EAAMI,QAAQI,UAClB,2BAAIR,EAAMI,QAAQK,QAAQC,YCNdC,EAAW,SAACX,GAAD,OACtB,6BAEGA,EAAMY,SAASC,KAAI,SAAAT,GAAO,OACpB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAAWA,SCJhCW,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,WAAhB,OACvB,2BACAhB,UAAY,4BACZiB,KAAK,SACLF,YAAgBA,EAChBG,SAAWF,KC+CGG,E,kDAhDb,aAAc,IAAD,8BACX,gBAkBFH,WAAY,SAACI,GAEX,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAlBpC,EAAKC,MAAQ,CACXd,SAAW,GACXW,YAAc,IALP,E,gEAUO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAWmB,S,+BAYjC,IAAD,EAC4BC,KAAKN,MAAhCd,EADD,EACCA,SAAWW,EADZ,EACYA,YACbU,EAAiBrB,EAASsB,QAAO,SAAA9B,GACrC,OAAOA,EAAQE,KAAK6B,cAAcC,SAASb,EAAYY,kBAGzD,OACE,yBAAKlC,UAAa,OAClB,wBAAIA,UAAW,4BAAf,kBACA,kBAAC,EAAD,CACAe,YAAc,SACdC,WAAce,KAAKf,aAGlB,kBAAC,EAAD,CAAUL,SAAYqB,S,GAxCXI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8cf3bcf8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Card = (props) => (\r\n\t<div className='tc bg-light-blue dib br3 pa2 ma2 grow bw2 shadow-5'>\r\n\t<img alt='img' src= {`https://robohash.org/${props.monster.id}.png?set=set4`} />\r\n\t<h2>{props.monster.name}</h2>\r\n\t<h4>{props.monster.email}</h4>\r\n\t<p>{props.monster.username}</p>\r\n\t<p>{props.monster.address.zipcode}</p>\r\n\r\n\t</div>\r\n\t);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nexport const Cardlist = (props) => (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\t  props.monsters.map(monster => (\r\n\t          <Card key={monster.id} monster = {monster} />\r\n\t          )\r\n\t           )\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n","import React from 'react';\r\n\r\nexport const SearchFi = ({placeholder , searchword}) => (\r\n\t<input \r\n\tclassName = 'pa2 ma2 ba b--purple grow'\r\n\ttype='search' \r\n\tplaceholder = { placeholder }\r\n\tonChange={ searchword } \r\n\t/>\r\n)","import React , { Component } from 'react';\nimport './App.css';\nimport { Cardlist } from './component/cardList/Cardlist.component';\nimport { SearchFi } from './component/search/Search.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    \n      this.state = {\n        monsters : [],\n        searchfield : ''\n      };\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}));\n\n\n\n  }\n\n  searchword= (e) => {\n\n    this.setState({searchfield : e.target.value});\n\n  }\n\n  render() {\n    const { monsters , searchfield } = this.state;\n    const filteredSearch = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchfield.toLowerCase())\n    });\n\n    return (\n      <div className =  \"App\">\n      <h1 className ='white f1 ttu tracked mt0'>My Cat Friends</h1>\n      <SearchFi \n      placeholder = 'search'\n      searchword= { this.searchword  }\n       />\n\n       <Cardlist monsters = {filteredSearch}>\n       \n       </Cardlist>\n      </div>\n  );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}